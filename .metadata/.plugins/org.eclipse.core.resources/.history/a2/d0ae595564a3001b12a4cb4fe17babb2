package principal;

import java.io.BufferedReader;
import java.io.FileReader;
import java.io.IOException;
import java.util.ArrayList;
import java.util.List;

import ai.RandomBiasedAI;
import ai.CMAB.A3NWithin;
import ai.abstraction.LightRush;
import ai.abstraction.WorkerRush;
import ai.configurablescript.BasicExpandedConfigurableScript;
import ai.configurablescript.ScriptsCreator;
import ai.core.AI;
import ai.evaluation.SimpleSqrtEvaluationFunction3;
import ai.synthesis.grammar.dslTree.interfacesDSL.iDSL;
import ai.synthesis.twophasessa.TradutorDSL;
import rts.units.UnitTypeTable;

public class AvaliaScripts {
	static String path_map = "";
	static int id_map=0;
	static UnitTypeTable utt;
	static String a = "";
	static String b = "";
	static String c = "";
	
	public static List<AI> decodeScripts(UnitTypeTable utt, String sScripts) {

		//decomp√µe a tupla
		ArrayList<Integer> iScriptsAi1 = new ArrayList<>();
		String[] itens = sScripts.split(";");

		for (String element : itens) {
			iScriptsAi1.add(Integer.decode(element));
		}

		List<AI> scriptsAI = new ArrayList<>();

		ScriptsCreator sc = new ScriptsCreator(utt, 300);
		ArrayList<BasicExpandedConfigurableScript> scriptsCompleteSet = sc.getScriptsMixReducedSet();

		iScriptsAi1.forEach((idSc) -> {
			scriptsAI.add(scriptsCompleteSet.get(idSc));
		});

		return scriptsAI;
	}
	
	public static AI getIA(int i) {
		if(i==0)return new A3NWithin(100, -1, 100, 8, 0.3F, 0.0F, 0.4F, 0, new RandomBiasedAI(utt),
				new SimpleSqrtEvaluationFunction3(), true, utt, "ManagerClosestEnemy", 3,
				decodeScripts(utt, "1;2;3;"), "A3N");
		else if(i==1) return new WorkerRush(utt);
		else if(i==2) return new LightRush(utt);
		else if(i==3) return ScriptHumano(id_map,0);
		else if(i==4) return ScriptHumano(id_map,1);
		else if(i==5) return ScriptHumano(id_map,2);
		else if(i==6) return ScriptHumano(id_map,3);
		return null;
	}
	
	public static void define_map(String i) {
		if(i.equals( "0")) {
		
			path_map = "./maps/mapadavid2.xml";
			id_map=0;
		}
		if(i.equals( "1")) {
			
			path_map = "./maps/8x8/basesWorkers8x8A.xml";
			id_map=1;
			
		}
		if(i.equals("3")) {
		
			path_map = "./maps/NoWhereToRun9x8.xml";
			id_map=3;
		}
		if(i.equals( "2")) {
			
			path_map = "./maps/24x24/basesWorkers24x24A.xml";
			id_map=2;
			
		}
		if(i.equals( "4")) {
		
			path_map = "./maps/DoubleGame24x24.xml";
			id_map=4;
		
		}
	}
	
	public static void ler() throws IOException {
		
		BufferedReader buffRead = new BufferedReader(new FileReader("./Camp/out_"+a+"_"+b+"_"+c+".txt"));
		String linha = "";
		linha = buffRead.readLine();
		while (true) {
			if (linha != null) {
				String dados[] = linha.split(";");
				String dados0[] = dados[0].split(" ");
				
				if(dados0[0].equals("Camp")) {
					TradutorDSL trad = new TradutorDSL(dados[1]);
					iDSL j = trad.getAST();
					System.out.println(linha);
				}
				
			} else
				break;
			linha = buffRead.readLine();
		}
		buffRead.close();
	}
	
	public static void main(String[] args) throws IOException {
		// TODO Auto-generated method stub
		a=args[0];
		b=args[1];
		c=args[2];
		define_map(args[1]);
		utt = new UnitTypeTable();
		ler();

	}

}
