package CFGBUS;

import java.util.ArrayList;
import java.util.List;
import java.util.Map;

import CFG.B;
import CFG.For_S;
import CFG.If_B_then_S;
import CFG.If_B_then_S_else_S;
import CFG.Node;
import CFG.S;

public class For_S_BUS extends For_S implements Grow {
	int size;
	public For_S_BUS() {
		// TODO Auto-generated constructor stub
	}

	public For_S_BUS(Node child) {
		super(child);
		// TODO Auto-generated constructor stub
		S_BUS s = (S_BUS)child;
		this.size = s.getSize() + 1; 
	}

	@Override
	public void grow(Map<Integer, List<S>> plist, int Size, List<B> blist,List<S> newList) {
		// TODO Auto-generated method stub
		
		List<List<Integer>> combinations = createcombinations(Size);
		
		for (List<Integer> c : combinations) {
			List<S> program_set1 = plist.get(c.get(0));
    
			for(S s1 : program_set1) {
				S aux = new S(new For_S(s1));
				newList.add(aux);
			}
		
		}
			
	}
	
	public List<List<Integer>> createcombinations(int size) {
		// TODO Auto-generated method stub
		List<List<Integer>>  l = new ArrayList<>();
		for(int i =1;i<size;i++) {
			
				List<Integer>  l2 = new ArrayList<>();
				l2.add(i);
			
		}
	
		return l;
	}

	@Override
	public int getSize() {
		// TODO Auto-generated method stub
		return size;
	}

	@Override
	public void grow(Map<Integer, List<S_BUS>> plist, int Size, List<B_BUS> blist, List<S_BUS> newList) {
		// TODO Auto-generated method stub
		
	}

}
